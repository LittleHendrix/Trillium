@using Trillium.Core
@using Trillium.Extensions
@inherits Umbraco.Web.Mvc.UmbracoViewPage<IPublishedContent>

@{
    bool isHome = ViewData["isHomepage"] != null && Convert.ToBoolean(ViewData["isHomepage"]);
    int max = isHome ? 6 : 0;

    var featuredNodes = Model.HasValue("featuredNodes") ? Model.MntpNodesFor("featuredNodes", max) : Model.Children.Take(max).ToList();
    
    if (Model.Children.Any(x => x.DocumentTypeAlias == "TeamMember"))
    {
        <h2 class="subhead">Meet the team</h2>

        if (isHome)
        {
            foreach (var group in featuredNodes.InGroupsOf(3))
            {
                <section class="multi-col">
                    <div class="tf-row">
                        @foreach (var member in group)
                        {
                            <div class="staff">
                                <div class="staff-img">
                                    <a href="@member.Url">@member.ImagesFor("memberPicture", 1, enableCrop: true)</a>
                                </div>
                                <h3><a href="@member.Url">@member.Name</a></h3>
                                <p class="title meta">
                                    @member.GetPropertyValue("memberTitle")
                                    @if (member.HasValue("memberQualifications"))
                                    {
                                        <br />@Html.Raw(library.ReplaceLineBreaks(member.GetPropertyValue<string>("memberQualifications")))
                                    }
                                </p>
                                <a href="@member.Url" class="btn" title="read more about @member.Name">Read more</a>
                            </div>
                        }
                    </div>
                </section>
            }
                @*<section class="multi-col">
                    <div class="tf-row">
                        @foreach (var member in featuredNodes)
                        {
                            <div class="staff">
                                <div class="staff-img">
                                    <a href="@member.Url">@member.ImagesFor("memberPicture", 1, enableCrop: true)</a>
                                </div>
                                <h3><a href="@member.Url">@member.Name</a></h3>
                                <p class="title meta">@member.GetPropertyValue("memberTitle")
                                @if (member.HasValue("memberQualifications"))
                                {
                                    <br />@Html.Raw(library.ReplaceLineBreaks(member.GetPropertyValue<string>("memberQualifications")))
                                }
                                </p>
                                <a href="@member.Url" class="btn" title="read more about @member.Name">Read more</a>
                            </div>
                        }
                    </div>
                </section>*@
            }
            else
            {
                foreach (var group in Model.Children.Where(x => x.DocumentTypeAlias == "TeamMember").InGroupsOf(3))
                {
                    <section class="multi-col">
                        <div class="tf-row">
                            @foreach (var member in group)
                            {
                                <div class="staff">
                                    <div class="staff-img">
                                        <a href="@member.Url">@member.ImagesFor("memberPicture", 1, enableCrop: true)</a>
                                    </div>
                                    <h3><a href="@member.Url">@member.Name</a></h3>
                                    <p class="title meta">
                                        @member.GetPropertyValue("memberTitle")
                                    @if (member.HasValue("memberQualifications"))
                                    {
                                        <br />@Html.Raw(library.ReplaceLineBreaks(member.GetPropertyValue<string>("memberQualifications")))
                                    }
                                    </p>
                                    <a href="@member.Url" class="btn" title="read more about @member.Name">Read more</a>
                                </div>
                            }
                        </div>
                    </section>
                }
            }
    }
    if (Model.Children.Any(x => x.DocumentTypeAlias == "Service"))
    {
        <section>
            @if (isHome)
            {
                foreach (var service in featuredNodes)
                {
                    var serviceTitle = service.HasValue("pageHeading") ? service.GetPropertyValue("pageHeading") : service.Name;
                    <div class="tf-row service-row">
                        <div class="service">
                            <h3 class="ser-@(service.Index() + 1)">@serviceTitle</h3>
                            <p class="synopsis">@Html.Raw(library.ReplaceLineBreaks(service.GetPropertyValue<string>("synopsis")))</p>
                            <a href="@service.Url" class="btn" title="read more on @serviceTitle">Read more</a>
                        </div>
                        @*<div class="affiliates">
                            @service.ImagesFor("affiliates", 10, htmlClassName: "logo")
                        </div>*@
                    </div>
                }
            }
            else
            {
                foreach (var service in Model.Children.Where(x => x.DocumentTypeAlias == "Service"))
                {
                    var serviceTitle = service.HasValue("pageHeading") ? service.GetPropertyValue("pageHeading") : service.Name;
                    <div class="tf-row service-row">
                        <div class="service">
                            <h3 class="ser-@(service.Index() + 1)">@serviceTitle</h3>
                            <p class="synopsis">@Html.Raw(library.ReplaceLineBreaks(service.GetPropertyValue<string>("synopsis")))</p>
                            <a href="@service.Url" class="btn" title="read more on @serviceTitle">Read more</a>
                        </div>
                        @*<div class="affiliates">
                                @service.ImagesFor("affiliates", 10, htmlClassName: "logo")
                            </div>*@
                    </div>
                }

            }
        </section>
    }
    if (Model.Children.Any(x => x.DocumentTypeAlias == "Testimonial"))
    {
        if (isHome)
        {
            foreach (var group in featuredNodes.InGroupsOf(3))
            {
                <section class="multi-col">
                    <div class="tf-row">
                        @foreach (var t in group)
                        {
                            var clientTitle = t.HasValue("pageHeading") ? t.GetPropertyValue("pageHeading") : t.Name;
                            <div class="testimonial">
                                <div class="compare-img">
                                    @t.ImagesFor("beforeImage", 1, enableCrop: true, htmlClassName: "before")
                                    <div class="cards">
                                        <div class="card front">
                                            <span class="plus">&nbsp;</span>
                                        </div>
                                        <div class="card back">
                                            @t.ImagesFor("afterImage", 1, enableCrop: true, htmlClassName: "after")
                                        </div>
                                    </div>
                                </div>
                                <h3><a href="@t.Url">@clientTitle</a></h3>
                                <p>@Html.Truncate(t.GetPropertyValue<string>("bodyText"), 125)</p>
                                <a href="@t.Url" class="btn" title="read more on @clientTitle's story">Read more</a>
                            </div>
                        }
                    </div>
                </section>
            }

            @*<section class="multi-col">
                <div class="tf-row">
                    @foreach (var t in featuredNodes)
                    {
                        var clientTitle = t.HasValue("pageHeading") ? t.GetPropertyValue("pageHeading") : t.Name;
                        <div class="testimonial">
                            <div class="compare-img">
                                @t.ImagesFor("beforeImage", 1, enableCrop: true, htmlClassName: "before")
                                <div class="cards">
                                    <div class="card front">
                                        <span class="plus">&nbsp;</span>
                                    </div>
                                    <div class="card back">
                                        @t.ImagesFor("afterImage", 1, enableCrop: true, htmlClassName: "after")
                                    </div>
                                </div>
                            </div>
                            <h3><a href="@t.Url">@clientTitle</a></h3>
                            <p>@Html.Truncate(t.GetPropertyValue<string>("bodyText"), 125)</p>
                            <a href="@t.Url" class="btn" title="read more on @clientTitle's story">Read more</a>
                        </div>
                    }
                </div>
            </section>*@
        }
        else
        {
            foreach (var group in Model.Children.Where(x => x.DocumentTypeAlias == "Testimonial").InGroupsOf(3))
            {
                <section class="multi-col">
                    <div class="tf-row">
                        @foreach (var t in group)
                        {
                            var clientTitle = t.HasValue("pageHeading") ? t.GetPropertyValue("pageHeading") : t.Name;
                            <div class="testimonial">
                                <div class="compare-img">
                                    @t.ImagesFor("beforeImage", 1, enableCrop: true, htmlClassName: "before")
                                    <div class="cards">
                                        <div class="card front">
                                            <span class="plus">&nbsp;</span>
                                        </div>
                                        <div class="card back">
                                            @t.ImagesFor("afterImage", 1, enableCrop: true, htmlClassName: "after")
                                        </div>
                                    </div>
                                </div>
                                <h3><a href="@t.Url">@clientTitle</a></h3>
                                <p>@Html.Truncate(t.GetPropertyValue<string>("bodyText"), 125)</p>
                                <a href="@t.Url" class="btn" title="read more on @clientTitle's story">Read more</a>
                            </div>
                        }
                    </div>
                </section>
            }
        }
    }
    if (Model.Children.Any(x => x.DocumentTypeAlias == "BlogPost"))
    {
        <section class="multi-col">
            <div class="tf-row">
                <div id="latestPosts">
                    @foreach (var post in Model.Children.Where(x => x.DocumentTypeAlias == "BlogPost").OrderByDescending(x => x.GetPropertyValue("publishDate")).ThenByDescending(x => x.CreateDate).Take(max))
                    {
                        var postTitle = post.HasValue("pageHeading") ? post.GetPropertyValue("pageHeading") : post.Name;
                        DateTime publishDate = post.HasValue("publishDate") ? post.GetPropertyValue<DateTime>("publishDate") : post.CreateDate;
                        var month = publishDate.ToString("MMMM");
                        var year = publishDate.ToString("yyyy");
                        int day = publishDate.Day;
                        var suffix = DateSuffixer.GetDayOfMonthSuffix(day);

                        <article class="post">
                            <h3><a href="@post.Url" title="@postTitle">@postTitle</a> <span class="meta">@month @day@suffix, @year</span></h3>
                            <div class="post-img">
                                @post.ImagesFor("pageMedia", 1)
                            </div>
                            <div class="post-body">
                                <p class="synopsis">@Html.Truncate(post.GetPropertyValue<string>("bodyText"), 150)</p>
                                <a href="@post.Url" class="btn" title="read more on @postTitle">Read more</a>
                            </div>
                            <div class="post-meta">
                                <div class="comment-count"><p class="meta"><a href="@post.Url" data-disqus-identifier="@post.Url">0 Comments</a></p></div>
                                <div class="tags"></div>
                            </div>
                        </article>
                    }
                </div>
            </div>
        </section>
    }
}